#!/usr/bin/env python
#-*- encoding:utf-8 -*-
__author__ = 'changjie.fan'
"""
引用级(项目级)的权限控制及提交规范的检查
"""

import sys
import os
import ConfigParser
import re

from colorama import *

from git_serve.access import have_reference_write_access
from git_serve.issue import check_issue_key
from git_serve.git_cmd import GitCmd

init(autoreset=True)
COLOR = [Fore.RED, Fore.GREEN, Fore.BLUE, Fore.BLACK, Fore.YELLOW,
         Fore.MAGENTA, Fore.CYAN, Fore.WHITE, Fore.RESET]
pattern = r'^<(REQ|BUG|FUNC|DEBUG|PATCH|BASELINE)><([A-Z]{3,}\-\d+)><(.+)>$'


def check_commit_msg(repo_path, old_rev, new_rev):
    """检查提交说明是否规范"""

    git_cmd = GitCmd(repo_path)
    change_commits = git_cmd.diff_commit(old_rev, new_rev)
    rp = re.compile(pattern)
    error_commit_list = []
    commit_list = []
    for commit in change_commits:
        m = rp.match(commit.message)
        if m:
            commit_list.append((commit, m.groups()[1]))
        else:
            error_commit_list.append('%s:%s' % (commit.hexsha, commit.message))

    return error_commit_list, commit_list


def read_config(config_file):
    """读取git-serve配置文件"""

    cfg = ConfigParser.RawConfigParser()
    try:
        conf_file = open(config_file, 'r')
    except (IOError, OSError), e:
        pass
    try:
        cfg.readfp(conf_file)
    finally:
        conf_file.close()
    return cfg


def main(argv):
    """
        git向update钩子传递的四个参数
        第一个参数是钩子的相对路径
        第二个参数是引用的名称
        第三个参数是旧的commit_id，新增的tag和branch此值为40个0
        第四个参数是当前最新的commit_id
        判断过程：
            1. check_commit_msg方法判断在push的commit中是否有提交说明不符合规范的commit
            2. check_issue_key方法判断提交说明中的ISSUE是否真实有效
            3. 判断提交权限
    """

    #读取配置文件信息
    cfg = read_config(os.path.expanduser('~/.git-serve/conf/git-serve.conf'))

    #当前进行的提交的用户名称, 由ssh处理脚本通过环境变量传递过来
    git_user = os.getenv('git_user')
    #当前提交仓库的相对路径, 由ssh处理脚本通过环境变量传递过来
    repo_path = os.getenv('access_repo_path')
    full_repo_path = os.path.join('/home/git/repositories', repo_path+'.git')

    reference_name = argv[1]
    old_rev = argv[2]
    new_rev = argv[3]

    print git_user
    print repo_path
    print sys.argv

    #检查提交说明是否符合规范
    (error_commit_list, commit_list) = check_commit_msg(full_repo_path, old_rev, new_rev)
    if error_commit_list:
        print Fore.RED+Style.BRIGHT + "以下Commit的说明不符合规范:\n"
        Fore.BLACK
        print '\n'.join(error_commit_list)
        print '\n'
        print Fore.YELLOW + '标准规范是:'+Fore.GREEN+' <REQ|BUG|FUNC|PATCH|DEBUG><JIRA_KEY><项目tag:说明>'
        Fore.BLACK
        sys.exit(1)

    #检查提交说明中的ISSUE_KEY是否真实有效
    (result, message) = check_issue_key(cfg, git_user, reference_name, full_repo_path, commit_list)
    #ISSUE KEY正确
    if not result:
        print Fore.RED+Style.BRIGHT + message
        sys.exit(1)

    #检查提交权限
    (result, message) = have_reference_write_access(cfg, git_user, reference_name, repo_path)
    if not result:
        print Fore.RED+Style.BRIGHT + message
        sys.exit(1)

    #正常退出
    sys.exit(0)

if __name__ == '__main__':
    main(sys.argv)