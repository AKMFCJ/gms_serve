#!/usr/bin/env python
#-*- encoding:utf-8 -*-
__author__ = 'changjie.fan'
"""
引用级(项目级)的权限控制及提交规范的检查
"""

import sys
import os
import ConfigParser

from colorama import *

from git_serve.access import have_reference_write_access
from git_serve.issue import check_issue_key

init(autoreset=True)
COLOR = [Fore.RED, Fore.GREEN, Fore.BLUE, Fore.BLACK, Fore.YELLOW,
         Fore.MAGENTA, Fore.CYAN, Fore.WHITE, Fore.RESET]


def read_config(config_file):
    """读取git-serve配置文件"""

    cfg = ConfigParser.RawConfigParser()
    try:
        conf_file = open(config_file, 'r')
    except (IOError, OSError), e:
        pass
    try:
        cfg.readfp(conf_file)
    finally:
        conf_file.close()
    return cfg


def main(argvs):
    #读取配置文件信息
    cfg = read_config(os.path.expanduser('~/.git-serve/conf/git-serve.conf'))
    #当前进行的提交的用户名称
    git_user = os.getenv('git_user')
    #当前提交仓库的相对路径
    repo_path = os.getenv('access_repo_path')

    #本地ip地址
    localhost_ip = cfg.get('localhost', 'ip')

    #git向update钩子传递的参数
    #第一个参数是钩子的相对路径
    #第二个参数是引用的名称
    #第三个参数是旧的commit_id，新增的tag和branch此值为40个0
    #第四个参数是当前最新的commit_id
    reference_name = argvs[1]
    old_rev = argvs[2]
    new_rev = argvs[3]

    print git_user
    print repo_path
    print sys.argv

    #检查提交说明中的JIRA_KEY是否真实有效
    check_issue_key(cfg, git_user, reference_name, repo_path, localhost_ip)
    if have_reference_write_access(cfg, git_user, reference_name, repo_path, localhost_ip):
        sys.exit(0)
    else:
        print Fore.RED+Style.BRIGHT + git_user + ":" + repo_path + ":" + reference_name+"没有提交权限"
        sys.exit(1)

if __name__ == '__main__':
    main(sys.argv)